// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	info "github.com/ava-labs/avalanchego/api/info"
	ids "github.com/ava-labs/avalanchego/ids"

	mock "github.com/stretchr/testify/mock"

	network "github.com/ava-labs/avalanchego/network"
)

// InfoClient is an autogenerated mock type for the Client type
type InfoClient struct {
	mock.Mock
}

// GetBlockchainID provides a mock function with given fields: alias
func (_m *InfoClient) GetBlockchainID(alias string) (ids.ID, error) {
	ret := _m.Called(alias)

	var r0 ids.ID
	if rf, ok := ret.Get(0).(func(string) ids.ID); ok {
		r0 = rf(alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ids.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkID provides a mock function with given fields:
func (_m *InfoClient) GetNetworkID() (uint32, error) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkName provides a mock function with given fields:
func (_m *InfoClient) GetNetworkName() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeID provides a mock function with given fields:
func (_m *InfoClient) GetNodeID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeIP provides a mock function with given fields:
func (_m *InfoClient) GetNodeIP() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeVersion provides a mock function with given fields:
func (_m *InfoClient) GetNodeVersion() (*info.GetNodeVersionReply, error) {
	ret := _m.Called()

	var r0 *info.GetNodeVersionReply
	if rf, ok := ret.Get(0).(func() *info.GetNodeVersionReply); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*info.GetNodeVersionReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxFee provides a mock function with given fields:
func (_m *InfoClient) GetTxFee() (*info.GetTxFeeResponse, error) {
	ret := _m.Called()

	var r0 *info.GetTxFeeResponse
	if rf, ok := ret.Get(0).(func() *info.GetTxFeeResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*info.GetTxFeeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBootstrapped provides a mock function with given fields: chainID
func (_m *InfoClient) IsBootstrapped(chainID string) (bool, error) {
	ret := _m.Called(chainID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Peers provides a mock function with given fields:
func (_m *InfoClient) Peers() ([]network.PeerInfo, error) {
	ret := _m.Called()

	var r0 []network.PeerInfo
	if rf, ok := ret.Get(0).(func() []network.PeerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.PeerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uptime provides a mock function with given fields:
func (_m *InfoClient) Uptime() (*info.UptimeResponse, error) {
	ret := _m.Called()

	var r0 *info.UptimeResponse
	if rf, ok := ret.Get(0).(func() *info.UptimeResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*info.UptimeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
